
==================== FINAL INTERFACE ====================
2019-02-12 09:38:07.575760249 UTC

interface main:Hangman 8063
  interface hash: edcc9a4f0795b70725155595fb1de674
  ABI hash: 5203f828d09980731fe5dc3fc5b2f4a6
  export-list hash: 3004c7151c65dc38ce47b12ae59abdb9
  orphan hash: 2d6c91b8ed22b7218ea3f55ccb0926ec
  flag hash: e9f05906463851f3ad2a3ddb91a0e2b2
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  Hangman.allWords
  Hangman.alreadyGuessed
  Hangman.charInWord
  Hangman.fillInCharacter
  Hangman.freshPuzzle
  Hangman.gameOver
  Hangman.gameWin
  Hangman.gameWords
  Hangman.handleGuess
  Hangman.maxWordLength
  Hangman.minWordLength
  Hangman.randomWord
  Hangman.randomWord'
  Hangman.renderPuzzleChar
  Hangman.runGame
  Hangman.wrongGuesses
  Hangman.Puzzle{Hangman.Puzzle}
  Hangman.WordList{Hangman.WordList}
module dependencies:
package dependencies: array-0.5.3.0 base-4.12.0.0* deepseq-1.4.4.0
                      ghc-prim-0.5.3 integer-gmp-1.0.2.0 random-1.1* time-1.8.0.2
orphans: time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian base-4.12.0.0:GHC.Float
         base-4.12.0.0:GHC.Base
family instance modules: base-4.12.0.0:Control.Applicative
                         base-4.12.0.0:Data.Complex base-4.12.0.0:Data.Functor.Compose
                         base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity
                         base-4.12.0.0:Data.Functor.Product base-4.12.0.0:Data.Functor.Sum
                         base-4.12.0.0:Data.Monoid base-4.12.0.0:Data.Semigroup
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:Data.Version
                         base-4.12.0.0:Data.Void base-4.12.0.0:GHC.Exts
                         base-4.12.0.0:GHC.Generics base-4.12.0.0:GHC.IO.Exception
import  -/  base-4.12.0.0:Control.Monad 7bd27be8172a0ce3a579caee3ae14f88
import  -/  base-4.12.0.0:Data.Char 0f6e335e98e2ddac4f2764f212d2f08a
import  -/  base-4.12.0.0:Data.Foldable 00188ddf89c975fee76bdfad479443c1
import  -/  base-4.12.0.0:Data.List ce2c69da408fdc014383cede9e1f9adf
import  -/  base-4.12.0.0:Data.Maybe 1e8e1362415df45376dffd98f8a47766
import  -/  base-4.12.0.0:Data.OldList c2cab40fed7d27b5e717779f9a3c09ea
import  -/  base-4.12.0.0:GHC.Base cc906f98291a1b830546e99a96674547
import  -/  base-4.12.0.0:GHC.List 734a72beb76d276fb4a0ba2689a5711f
import  -/  base-4.12.0.0:GHC.Num 847723f2584d989dac1eada133ac3fb8
import  -/  base-4.12.0.0:GHC.Real f7dad82c1d43d80823865d3e6c6636e0
import  -/  base-4.12.0.0:GHC.Show 4e438f26d903388cc6c2c5d64ed01b98
import  -/  base-4.12.0.0:Prelude 5c01365ec01f83bd405ac01cbb9a8d76
import  -/  base-4.12.0.0:System.Exit 9bdfd82d04c0a0b8d920842d9c4e961d
import  -/  base-4.12.0.0:System.IO 88c2b1c4079c52d62ed362d4eb9a5302
import  -/  ghc-prim-0.5.3:GHC.Classes e0d9c979f6368701f34fa421754d2cce
import  -/  ghc-prim-0.5.3:GHC.Types 57064c9f957b09bc2e360061ad5cae0b
import  -/  integer-gmp-1.0.2.0:GHC.Integer.Type 7f56f3d142debd8666df241a1ddc7887
import  -/  random-1.1:System.Random 8c06dce30a9b8b4f2b7c15fb3f418e08
49ff4aa8b4cedb764a573daf6f716e4e
  $fEqWordList :: GHC.Classes.Eq Hangman.WordList
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Hangman.WordList
                  GHC.Classes.$fEq[]_$s$c==1
                    `cast`
                  (Sym (Hangman.N:WordList[0])
                   ->_R Sym (Hangman.N:WordList[0])
                   ->_R <GHC.Types.Bool>_R)
                  Hangman.$fEqWordList_$s$fEq[]_$c/=
                    `cast`
                  (Sym (Hangman.N:WordList[0])
                   ->_R Sym (Hangman.N:WordList[0])
                   ->_R <GHC.Types.Bool>_R) -}
11ba0ecd145babbc0f584ea3f2d9815f
  $fEqWordList_$s$fEq[]_$c/= ::
    [[GHC.Types.Char]] -> [[GHC.Types.Char]] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: [[GHC.Types.Char]]) (y :: [[GHC.Types.Char]]) ->
                 case GHC.Classes.$fEq[]_$s$c==1 x y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
ea0352f9333c4f843f7689f52dceab64
  $fShowPuzzle :: GHC.Show.Show Hangman.Puzzle
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Hangman.Puzzle
                  Hangman.$fShowPuzzle_$cshowsPrec
                  Hangman.$fShowPuzzle_$cshow
                  Hangman.$fShowPuzzle_$cshowList -}
ea0352f9333c4f843f7689f52dceab64
  $fShowPuzzle1 ::
    Hangman.Puzzle -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2, Strictness: <S(LSL),1*U(U,1*U,U)><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Hangman.Puzzle) (s :: GHC.Base.String)[OneShot] ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n
                      (Hangman.$fShowPuzzle_$cshow x))
                   s) -}
6d68b22bd53cf4c79dff11671d8fa0a5
  $fShowPuzzle2 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# ' '#) -}
2cb79e35596c45a67f2ec67837c6a8ea
  $fShowPuzzle3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (" | Wrong guesses: "#) -}
9bf5bf64c182becc15bd4fd6ccd7f52d
  $fShowPuzzle4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (" | Guessed so far: "#) -}
ea0352f9333c4f843f7689f52dceab64
  $fShowPuzzle_$cshow :: Hangman.Puzzle -> GHC.Base.String
  {- Arity: 1, Strictness: <S(LSL),1*U(U,1*U,U)>, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Hangman.Puzzle) ->
                 case w of ww { Hangman.Puzzle ww1 ww2 ww3 ->
                 Hangman.$w$cshow ww1 ww2 ww3 }) -}
ea0352f9333c4f843f7689f52dceab64
  $fShowPuzzle_$cshowList :: [Hangman.Puzzle] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Hangman.Puzzle]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ Hangman.Puzzle Hangman.$fShowPuzzle1 ls s) -}
ea0352f9333c4f843f7689f52dceab64
  $fShowPuzzle_$cshowsPrec ::
    GHC.Types.Int -> Hangman.Puzzle -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S(LSL),1*U(U,1*U,U)><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int)
                   (x :: Hangman.Puzzle)
                   (s :: GHC.Base.String) ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n
                      (Hangman.$fShowPuzzle_$cshow x))
                   s) -}
49ff4aa8b4cedb764a573daf6f716e4e
  $fShowWordList :: GHC.Show.Show Hangman.WordList
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Hangman.WordList
                  Hangman.$fShowWordList_$cshowsPrec
                  Hangman.$fShowWordList_$cshow
                  Hangman.$fShowWordList_$cshowList -}
49ff4aa8b4cedb764a573daf6f716e4e
  $fShowWordList1 :: Hangman.WordList -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,1*U><L,U>,
     Unfolding: (\ (w :: Hangman.WordList) (w1 :: GHC.Base.String) ->
                 Hangman.$w$cshowsPrec 0# w w1) -}
5dbc2f8140c92c15cb9301ab0ae02916
  $fShowWordList2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("WordList "#) -}
29bfff2dedabf465f248cea02c0fa535
  $fShowWordList3 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
49ff4aa8b4cedb764a573daf6f716e4e
  $fShowWordList_$cshow :: Hangman.WordList -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Hangman.WordList) ->
                 Hangman.$fShowWordList_$cshowsPrec
                   Hangman.$fShowWordList3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
49ff4aa8b4cedb764a573daf6f716e4e
  $fShowWordList_$cshowList :: [Hangman.WordList] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Hangman.WordList]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Hangman.WordList
                   Hangman.$fShowWordList1
                   ls
                   s) -}
49ff4aa8b4cedb764a573daf6f716e4e
  $fShowWordList_$cshowsPrec ::
    GHC.Types.Int -> Hangman.WordList -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><L,1*U><L,U>, Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Hangman.WordList)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Hangman.$w$cshowsPrec ww1 w1 w2 }) -}
4a17635f5e3d8d1ebf272b22f384d91d
  $tc'Puzzle :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10373147214130981918##
                   6720424835797457609##
                   Hangman.$trModule
                   Hangman.$tc'Puzzle2
                   0#
                   Hangman.$tc'Puzzle1) -}
8acfbd3f13b5a95c0b5c291f449b3f3c
  $tc'Puzzle1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
1faad29c7f5425010682dfc7ee7dfb13
  $tc'Puzzle2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Hangman.$tc'Puzzle3) -}
c72a1f425b8f773e2cf56c409aa292a4
  $tc'Puzzle3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Puzzle"#) -}
07e2ef2c0b0eda83fbd9a1e2d8fb6d8a
  $tc'WordList :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15136297124377412958##
                   18432020075271759170##
                   Hangman.$trModule
                   Hangman.$tc'WordList2
                   0#
                   Hangman.$tc'WordList1) -}
55e731734365385ce22acb75fe4e8e0a
  $tc'WordList1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
0d621e55feb3ec9e28f1b982e88b7bee
  $tc'WordList2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Hangman.$tc'WordList3) -}
02e45b4c34415c01159a41c7e8df2ca5
  $tc'WordList3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'WordList"#) -}
ca9e62dc30cb82d2b19e8a777be91c3d
  $tcPuzzle :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17437870294731986179##
                   17918978986600836315##
                   Hangman.$trModule
                   Hangman.$tcPuzzle1
                   0#
                   GHC.Types.krep$*) -}
5749864b753196cb7ffd4fd569e8af2a
  $tcPuzzle1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Hangman.$tcPuzzle2) -}
a8e4389964b1347b2510c651f5c094db
  $tcPuzzle2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Puzzle"#) -}
d8cd21dd9a7f154e7c2eebfc74f8464a
  $tcWordList :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17432694108684884319##
                   9019387064425694760##
                   Hangman.$trModule
                   Hangman.$tcWordList1
                   0#
                   GHC.Types.krep$*) -}
00de4e4a2735bdc081a588c510c89871
  $tcWordList1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Hangman.$tcWordList2) -}
1a2eb159259c38b8b4fd411cd3fd952c
  $tcWordList2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("WordList"#) -}
5b13ebaa50a10bc7bc155b1efc14526c
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Hangman.$trModule3
                   Hangman.$trModule1) -}
fccd113893439d6377f6f69da6f21044
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Hangman.$trModule2) -}
3ecdf6062353788e1d8d6d0b4a78fafc
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Hangman"#) -}
ac9743bf0f3368d76d4943ff1ac7cb5c
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Hangman.$trModule4) -}
2a9b3d82759aaf23156c8d486607ef2d
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
6a5215dd94ee44cfcdf479082c15d4dc
  $w$cshow ::
    GHC.Base.String
    -> [GHC.Maybe.Maybe GHC.Types.Char]
    -> [GHC.Types.Char]
    -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U><S,1*U><L,U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Base.String)
                   (ww1 :: [GHC.Maybe.Maybe GHC.Types.Char])
                   (ww2 :: [GHC.Types.Char]) ->
                 let {
                   n :: [GHC.Types.Char]
                   = GHC.CString.unpackAppendCString#
                       Hangman.$fShowPuzzle4
                       (GHC.Base.++
                          @ GHC.Types.Char
                          ww2
                          (GHC.CString.unpackAppendCString#
                             Hangman.$fShowPuzzle3
                             (case Hangman.$wwrongGuesses ww ww2 of ww3 { DEFAULT ->
                              case GHC.Show.$w$cshowsPrec4
                                     0#
                                     (GHC.Integer.Type.S# ww3)
                                     (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                              GHC.Types.: @ GHC.Types.Char ww5 ww6 } })))
                 } in
                 case GHC.Base.map
                        @ (GHC.Maybe.Maybe GHC.Types.Char)
                        @ GHC.Types.Char
                        Hangman.renderPuzzleChar
                        ww1 of wild {
                   [] -> n
                   : x xs
                   -> GHC.Base.++_$s++
                        @ GHC.Types.Char
                        n
                        x
                        (Data.OldList.prependToAll
                           @ GHC.Types.Char
                           Hangman.$fShowPuzzle2
                           xs) }) -}
49ff4aa8b4cedb764a573daf6f716e4e
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> Hangman.WordList -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><L,1*U><L,U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: Hangman.WordList)
                   (w1 :: GHC.Base.String) ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     GHC.CString.unpackAppendCString#
                       Hangman.$fShowWordList2
                       (case w `cast` (Hangman.N:WordList[0]) of wild {
                          [] -> GHC.CString.unpackAppendCString# GHC.Show.showList__4 x
                          : x1 xs
                          -> GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.showList__3
                               (GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.$fShow(,)3
                                  (GHC.Show.showLitString
                                     x1
                                     (GHC.Types.:
                                        @ GHC.Types.Char
                                        GHC.Show.$fShow(,)3
                                        (let {
                                           lvl43 :: [GHC.Types.Char]
                                           = GHC.Types.: @ GHC.Types.Char GHC.Show.showList__2 x
                                         } in
                                         letrec {
                                           showl :: [[GHC.Types.Char]] -> GHC.Base.String
                                             {- Arity: 1, Strictness: <S,1*U> -}
                                           = \ (ds2 :: [[GHC.Types.Char]]) ->
                                             case ds2 of wild1 {
                                               [] -> lvl43
                                               : y ys
                                               -> GHC.Types.:
                                                    @ GHC.Types.Char
                                                    GHC.Show.showList__1
                                                    (GHC.Types.:
                                                       @ GHC.Types.Char
                                                       GHC.Show.$fShow(,)3
                                                       (GHC.Show.showLitString
                                                          y
                                                          (GHC.Types.:
                                                             @ GHC.Types.Char
                                                             GHC.Show.$fShow(,)3
                                                             (showl ys)))) }
                                         } in
                                         showl xs)))) })
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT -> p w1
                   1#
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 w1)) }) -}
0aa41e4d2a71ea6f88fa93d7d7a1983a
  $wfillInCharacter ::
    GHC.Base.String
    -> [GHC.Maybe.Maybe GHC.Types.Char]
    -> [GHC.Types.Char]
    -> GHC.Types.Char
    -> (# GHC.Base.String, [GHC.Maybe.Maybe GHC.Types.Char],
          [GHC.Types.Char] #)
  {- Arity: 4, HasNoCafRefs, Strictness: <L,U><L,1*U><L,U><L,U(U)>,
     Inline: [2],
     Unfolding: (\ (ww :: GHC.Base.String)
                   (ww1 :: [GHC.Maybe.Maybe GHC.Types.Char])
                   (ww2 :: [GHC.Types.Char])
                   (w :: GHC.Types.Char) ->
                 (# ww,
                    letrec {
                      go2 :: [GHC.Types.Char]
                             -> [GHC.Maybe.Maybe GHC.Types.Char]
                             -> [GHC.Maybe.Maybe GHC.Types.Char]
                        {- Arity: 2, Strictness: <S,1*U><L,1*U> -}
                      = \ (ds :: [GHC.Types.Char])
                          (ds1 :: [GHC.Maybe.Maybe GHC.Types.Char]) ->
                        case ds of wild {
                          [] -> GHC.Types.[] @ (GHC.Maybe.Maybe GHC.Types.Char)
                          : ipv ipv1
                          -> case ds1 of wild1 {
                               [] -> GHC.Types.[] @ (GHC.Maybe.Maybe GHC.Types.Char)
                               : ipv2 ipv3
                               -> GHC.Types.:
                                    @ (GHC.Maybe.Maybe GHC.Types.Char)
                                    (case ipv of wild2 { GHC.Types.C# x ->
                                     case w of wild3 { GHC.Types.C# y ->
                                     case GHC.Prim.eqChar# x y of lwild {
                                       DEFAULT -> ipv2
                                       1# -> GHC.Maybe.Just @ GHC.Types.Char wild2 } } })
                                    (go2 ipv1 ipv3) } }
                    } in
                    go2 ww ww1,
                    GHC.Types.: @ GHC.Types.Char w ww2 #)) -}
6be14a4298054935ebdd719b81d975d2
  $wgameOver ::
    GHC.Base.String
    -> [GHC.Types.Char]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <L,U><S,1*U><S,U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Base.String)
                   (ww1 :: [GHC.Types.Char])
                   (w :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Hangman.$wwrongGuesses ww ww1 of ww2 { DEFAULT ->
                 case GHC.Integer.Type.gtInteger#
                        (GHC.Integer.Type.S# ww2)
                        Hangman.gameOver5 of wild {
                   DEFAULT -> (# w, GHC.Tuple.() #)
                   1#
                   -> case (GHC.IO.Handle.Text.hPutStr'
                              GHC.IO.Handle.FD.stdout
                              Hangman.gameOver3
                              GHC.Types.True)
                             `cast`
                           (GHC.Types.N:IO[0] <()>_R)
                             w of ds1 { (#,#) ipv ipv1 ->
                      case (GHC.IO.Handle.Text.hPutStr'
                              GHC.IO.Handle.FD.stdout
                              (GHC.CString.unpackAppendCString# Hangman.gameOver2 ww)
                              GHC.Types.True)
                             `cast`
                           (GHC.Types.N:IO[0] <()>_R)
                             ipv of ds2 { (#,#) ipv2 ipv3 ->
                      System.Exit.exitSuccess1 @ () ipv2 } } } }) -}
86a775af203de9c6b9a02707e593c808
  $wgameWin ::
    [GHC.Maybe.Maybe GHC.Types.Char]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S,1*U><S,U>, Inline: [2],
     Unfolding: (\ (ww :: [GHC.Maybe.Maybe GHC.Types.Char])
                   (w :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 let {
                   exit :: (# GHC.Prim.State# GHC.Prim.RealWorld, () #) <join 0>
                   = (# w, GHC.Tuple.() #)
                 } in
                 let {
                   $j :: (# GHC.Prim.State# GHC.Prim.RealWorld, () #) <join 0>
                   = case (GHC.IO.Handle.Text.hPutStr'
                             GHC.IO.Handle.FD.stdout
                             Hangman.gameWin2
                             GHC.Types.True)
                            `cast`
                          (GHC.Types.N:IO[0] <()>_R)
                            w of ds1 { (#,#) ipv ipv1 ->
                     System.Exit.exitSuccess1 @ () ipv }
                 } in
                 letrec {
                   go1 :: [GHC.Maybe.Maybe GHC.Types.Char]
                          -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                     <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [GHC.Maybe.Maybe GHC.Types.Char]) ->
                     case ds of wild {
                       [] -> $j
                       : y ys
                       -> case y of wild1 {
                            GHC.Maybe.Nothing -> exit GHC.Maybe.Just ipv -> go1 ys } }
                 } in
                 go1 ww) -}
ea3569136b7b882edb87b4884ef06e9b
  $wrunGame ::
    GHC.Base.String
    -> [GHC.Maybe.Maybe GHC.Types.Char]
    -> [GHC.Types.Char]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4, Strictness: <L,U><L,U><S,U><S,U>, Inline: [2] -}
3217dae35a2c0d373de9e9202b02b6c5
  $wwrongGuesses ::
    GHC.Base.String -> [GHC.Types.Char] -> GHC.Prim.Int#
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Base.String) (ww1 :: [GHC.Types.Char]) ->
                 let {
                   $j :: GHC.Prim.Int# -> GHC.Prim.Int#
                     <join 1> {- Arity: 1, Strictness: <S,U> -}
                   = \ (ww2 :: GHC.Prim.Int#)[OneShot] ->
                     case GHC.Integer.Type.smallInteger
                            ww2 of ww3 { GHC.Integer.Type.S# ww4 ->
                     ww4 }
                 } in
                 letrec {
                   $wgo :: [GHC.Types.Char] -> GHC.Prim.Int# -> GHC.Prim.Int#
                     <join 2> {- Arity: 2, Strictness: <S,1*U><S,U>, Inline: [2] -}
                   = \ (w :: [GHC.Types.Char]) (ww2 :: GHC.Prim.Int#) ->
                     case w of wild {
                       [] -> $j ww2
                       : y ys
                       -> case GHC.List.elem
                                 @ GHC.Types.Char
                                 GHC.Classes.$fEqChar
                                 y
                                 ww of wild1 {
                            GHC.Types.False -> $wgo ys (GHC.Prim.+# ww2 1#)
                            GHC.Types.True -> $wgo ys ww2 } }
                 } in
                 $wgo ww1 0#) -}
ea0352f9333c4f843f7689f52dceab64
  data Puzzle
    = Puzzle GHC.Base.String
             [GHC.Maybe.Maybe GHC.Types.Char]
             [GHC.Types.Char]
49ff4aa8b4cedb764a573daf6f716e4e
  newtype WordList = WordList [GHC.Base.String]
fe9cf7aea342669c0491aa2cb0fd304f
  allWords :: GHC.Types.IO Hangman.WordList
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Hangman.allWords1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <Hangman.WordList>_R)) -}
e173215095d30e12cda8ce71cf2284a4
  allWords1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Hangman.WordList #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.IO.Handle.FD.openFile1
                        Hangman.allWords2
                        GHC.IO.IOMode.ReadMode
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hGetContents1
                        ipv1
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 (# ipv2,
                    (Data.OldList.lines ipv3)
                      `cast`
                    (Sym (Hangman.N:WordList[0])) #) } }) -}
bed8bfeae3494fc3e898bcb51fcf6754
  allWords2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Hangman.allWords3) -}
93c086d385c5296f40389bfedc70df46
  allWords3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("data/dict.txt"#) -}
7539d5aa0a274245c6e15d41dc39dca1
  alreadyGuessed ::
    Hangman.Puzzle -> GHC.Types.Char -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Hangman.Puzzle) (c :: GHC.Types.Char) ->
                 case ds of wild { Hangman.Puzzle ds1 ds2 guessed ->
                 GHC.List.elem @ GHC.Types.Char GHC.Classes.$fEqChar c guessed }) -}
8439bc6477a328f623ea34e5a56d009e
  charInWord :: Hangman.Puzzle -> GHC.Types.Char -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U,A,A)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Hangman.Puzzle) (c :: GHC.Types.Char) ->
                 case ds of wild { Hangman.Puzzle w ds1 ds2 ->
                 GHC.List.elem @ GHC.Types.Char GHC.Classes.$fEqChar c w }) -}
03be3e8fb7b38d86e16ab4ad8d51b733
  fillInCharacter ::
    Hangman.Puzzle -> GHC.Types.Char -> Hangman.Puzzle
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U,1*U,U)><L,U(U)>m,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Hangman.Puzzle) (w1 :: GHC.Types.Char) ->
                 case w of ww { Hangman.Puzzle ww1 ww2 ww3 ->
                 case Hangman.$wfillInCharacter
                        ww1
                        ww2
                        ww3
                        w1 of ww4 { (#,,#) ww5 ww6 ww7 ->
                 Hangman.Puzzle ww5 ww6 ww7 } }) -}
3abc285348ec3e1152f4ab6b4830d88d
  freshPuzzle :: GHC.Base.String -> Hangman.Puzzle
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Base.String) ->
                 Hangman.Puzzle
                   w
                   (letrec {
                      go1 :: [GHC.Types.Char] -> [GHC.Maybe.Maybe GHC.Types.Char]
                        {- Arity: 1, Strictness: <S,U> -}
                      = \ (ds :: [GHC.Types.Char]) ->
                        case ds of wild {
                          [] -> GHC.Types.[] @ (GHC.Maybe.Maybe GHC.Types.Char)
                          : y ys
                          -> GHC.Types.:
                               @ (GHC.Maybe.Maybe GHC.Types.Char)
                               (GHC.Maybe.Nothing @ GHC.Types.Char)
                               (go1 ys) }
                    } in
                    go1 w)
                   (GHC.Types.[] @ GHC.Types.Char)) -}
9d11f6f7265f29da8333e21ce4e492c5
  gameOver :: Hangman.Puzzle -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <S(LLS),1*U(U,A,1*U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Hangman.gameOver1
                  `cast`
                (<Hangman.Puzzle>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
9252474d55a97a69a787081adcd3d953
  gameOver1 ::
    Hangman.Puzzle
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S(LLS),1*U(U,A,1*U)><S,U>, Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Hangman.Puzzle)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { Hangman.Puzzle ww1 ww2 ww3 ->
                 Hangman.$wgameOver ww1 ww3 w1 }) -}
8d181b170dae73fdad5c5f8ac58d910d
  gameOver2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("The word was: "#) -}
dc26b660ebfdb0055d1e6287948420fc
  gameOver3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Hangman.gameOver4) -}
dc7df65d98980fbe4aa56177aa21d852
  gameOver4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("You lose!"#) -}
7ec278069d9576864459a859f00b560b
  gameOver5 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (7) -}
3a56c4cd2fc967151f8a65cf363fd27e
  gameWin :: Hangman.Puzzle -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <S(LSL),1*U(A,1*U,A)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Hangman.gameWin1
                  `cast`
                (<Hangman.Puzzle>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
92ea21182ea2a81c92cdffada21bb3bd
  gameWin1 ::
    Hangman.Puzzle
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S(LSL),1*U(A,1*U,A)><S,U>, Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Hangman.Puzzle)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { Hangman.Puzzle ww1 ww2 ww3 ->
                 Hangman.$wgameWin ww2 w1 }) -}
3447dc8723328224b9bdbf4e36e89529
  gameWin2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Hangman.gameWin3) -}
850e17b8d47a00d2d5e96a006d9497b8
  gameWin3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("You win"#) -}
5a97b1d7f561f0159976710cd1552446
  gameWords :: GHC.Types.IO Hangman.WordList
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Hangman.gameWords1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <Hangman.WordList>_R)) -}
9b10f87eb7dd6e0d4f31bc0d2fd502c1
  gameWords1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Hangman.WordList #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.IO.Handle.FD.openFile1
                        Hangman.allWords2
                        GHC.IO.IOMode.ReadMode
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hGetContents1
                        ipv1
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 (# ipv2,
                    (GHC.List.filter
                       @ [GHC.Types.Char]
                       Hangman.gameWords2
                       (Data.OldList.lines ipv3))
                      `cast`
                    (Sym (Hangman.N:WordList[0])) #) } }) -}
62ce3e0bdec6d760a1ff0cdb31c5e696
  gameWords2 :: [GHC.Types.Char] -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (w :: [GHC.Types.Char]) ->
                 case GHC.List.$wlenAcc @ GHC.Types.Char w 0# of ww2 { DEFAULT ->
                 case GHC.Prim.>=# ww2 5# of lwild {
                   DEFAULT -> GHC.Types.False
                   1#
                   -> GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# ww2 9#) } }) -}
199a8176260e440aec77f53ba938dd4a
  handleGuess ::
    Hangman.Puzzle -> GHC.Types.Char -> GHC.Types.IO Hangman.Puzzle
  {- Arity: 3, Strictness: <L,1*U(U,U,U)><L,U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Hangman.handleGuess1
                  `cast`
                (<Hangman.Puzzle>_R
                 ->_R <GHC.Types.Char>_R
                 ->_R Sym (GHC.Types.N:IO[0] <Hangman.Puzzle>_R)) -}
b9d8b67357de6eef8096c04b354bcda5
  handleGuess1 ::
    Hangman.Puzzle
    -> GHC.Types.Char
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Hangman.Puzzle #)
  {- Arity: 3, Strictness: <L,1*U(U,U,U)><L,U(U)><S,U>,
     Unfolding: (\ (puzzle :: Hangman.Puzzle)
                   (guess :: GHC.Types.Char)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (GHC.IO.Handle.Text.hPutStr'
                         GHC.IO.Handle.FD.stdout
                         (GHC.CString.unpackAppendCString#
                            Hangman.handleGuess8
                            (GHC.Types.:
                               @ GHC.Types.Char
                               guess
                               (GHC.Types.[] @ GHC.Types.Char)))
                         GHC.Types.True)
                        `cast`
                      (GHC.Types.N:IO[0] <()>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 case puzzle of wild { Hangman.Puzzle ds ds2 guessed ->
                 case GHC.List.elem
                        @ GHC.Types.Char
                        GHC.Classes.$fEqChar
                        guess
                        guessed of wild1 {
                   GHC.Types.False
                   -> case GHC.List.elem
                             @ GHC.Types.Char
                             GHC.Classes.$fEqChar
                             guess
                             ds of wild2 {
                        GHC.Types.False
                        -> case (GHC.IO.Handle.Text.hPutStr'
                                   GHC.IO.Handle.FD.stdout
                                   Hangman.handleGuess6
                                   GHC.Types.True)
                                  `cast`
                                (GHC.Types.N:IO[0] <()>_R)
                                  ipv of ds3 { (#,#) ipv2 ipv3 ->
                           (# ipv2,
                              case Hangman.$wfillInCharacter
                                     ds
                                     ds2
                                     guessed
                                     guess of ww { (#,,#) ww1 ww2 ww3 ->
                              Hangman.Puzzle ww1 ww2 ww3 } #) }
                        GHC.Types.True
                        -> case (GHC.IO.Handle.Text.hPutStr'
                                   GHC.IO.Handle.FD.stdout
                                   Hangman.handleGuess4
                                   GHC.Types.True)
                                  `cast`
                                (GHC.Types.N:IO[0] <()>_R)
                                  ipv of ds3 { (#,#) ipv2 ipv3 ->
                           (# ipv2,
                              case Hangman.$wfillInCharacter
                                     ds
                                     ds2
                                     guessed
                                     guess of ww { (#,,#) ww1 ww2 ww3 ->
                              Hangman.Puzzle ww1 ww2 ww3 } #) } }
                   GHC.Types.True
                   -> case (GHC.IO.Handle.Text.hPutStr'
                              GHC.IO.Handle.FD.stdout
                              Hangman.handleGuess2
                              GHC.Types.True)
                             `cast`
                           (GHC.Types.N:IO[0] <()>_R)
                             ipv of ds3 { (#,#) ipv2 ipv3 ->
                      (# ipv2, wild #) } } } }) -}
8f5d7a69f1beffbe170625eea981d2c4
  handleGuess2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Hangman.handleGuess3) -}
d4887bee31d9eba3b8ce44c85a6ef079
  handleGuess3 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("You already guessed that character, pick something else!"#) -}
4d40bddf5f85f507138cf4198a4bc071
  handleGuess4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Hangman.handleGuess5) -}
7585ee6db8ca88c56624fae5d7305f42
  handleGuess5 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("This character was in the word, filling in the word accordingly"#) -}
e847df2bd84134bf1f80b38307a2127b
  handleGuess6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Hangman.handleGuess7) -}
23fa1ef62a1ebd2beee9e4c889ac4ecd
  handleGuess7 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("This character wasn't in the word, try again."#) -}
860fe35fda396c86cc9a8229799aa4ff
  handleGuess8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Your guess was: "#) -}
023abea04f9168c500005e9ada3da7e5
  maxWordLength :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 9#) -}
ed18b84fe331ab912bbdedb2eec27743
  minWordLength :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 5#) -}
df2a5666f999ad190a62a6d64a695602
  randomWord :: Hangman.WordList -> GHC.Types.IO GHC.Base.String
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Hangman.randomWord1
                  `cast`
                (<Hangman.WordList>_R
                 ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R)) -}
f832315550b6db9845f3d431011659a9
  randomWord' :: GHC.Types.IO GHC.Base.String
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Hangman.randomWord'1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R)) -}
c6e221fe6884043d30b37262df0499d3
  randomWord'1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.IO.Handle.FD.openFile1
                        Hangman.allWords2
                        GHC.IO.IOMode.ReadMode
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hGetContents1
                        ipv1
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 Hangman.randomWord1
                   (GHC.List.filter
                      @ [GHC.Types.Char]
                      Hangman.gameWords2
                      (Data.OldList.lines ipv3))
                     `cast`
                   (Sym (Hangman.N:WordList[0]))
                   ipv2 } }) -}
811e2ddaed8df14871fe5d2cd4a4ab72
  randomWord1 ::
    Hangman.WordList
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: (\ (ds :: Hangman.WordList)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case System.Random.$fRandomInt3
                        (Hangman.$fShowWordList3,
                         case GHC.List.$wlenAcc
                                @ [GHC.Types.Char]
                                ds `cast` (Hangman.N:WordList[0])
                                0# of ww2 { DEFAULT ->
                         GHC.Types.I# (GHC.Prim.-# ww2 1#) })
                        s of ds1 { (#,#) ipv ipv1 ->
                 (# ipv,
                    GHC.List.!!
                      @ GHC.Base.String
                      ds `cast` (Hangman.N:WordList[0])
                      ipv1 #) }) -}
2ed09abfd8baf88bd460d214d2135b3f
  renderPuzzleChar ::
    GHC.Maybe.Maybe GHC.Types.Char -> GHC.Types.Char
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GHC.Maybe.Maybe GHC.Types.Char) ->
                 case ds of wild {
                   GHC.Maybe.Nothing -> Hangman.renderPuzzleChar1
                   GHC.Maybe.Just c -> c }) -}
a7937a5ea920e1be54a39b16f62bc811
  renderPuzzleChar1 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# '_'#) -}
1ec389e53cc4ede73d4d4e2cc76fa67d
  runGame :: Hangman.Puzzle -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <S(LLS),1*U(U,U,U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Hangman.runGame1
                  `cast`
                (<Hangman.Puzzle>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
14e8bb707c3e9718abbd636a19d23979
  runGame1 ::
    Hangman.Puzzle
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S(LLS),1*U(U,U,U)><S,U>, Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Hangman.Puzzle)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { Hangman.Puzzle ww1 ww2 ww3 ->
                 Hangman.$wrunGame ww1 ww2 ww3 w1 }) -}
91e59118cbde60eff90e4c146ea19ae2
  wrongGuesses :: Hangman.Puzzle -> GHC.Integer.Type.Integer
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(U,A,1*U)>m1,
     Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Hangman.Puzzle) ->
                 case w of ww { Hangman.Puzzle ww1 ww2 ww3 ->
                 case Hangman.$wwrongGuesses ww1 ww3 of ww4 { DEFAULT ->
                 GHC.Integer.Type.S# ww4 } }) -}
instance [safe] GHC.Classes.Eq [Hangman.WordList]
  = Hangman.$fEqWordList
instance [safe] GHC.Show.Show [Hangman.Puzzle]
  = Hangman.$fShowPuzzle
instance [safe] GHC.Show.Show [Hangman.WordList]
  = Hangman.$fShowWordList
"SPEC/Hangman $fEq[]_$c/= @ [Char]" [orphan] forall ($dEq :: GHC.Classes.Eq
                                                               [GHC.Types.Char])
  GHC.Classes.$fEq[]_$c/= @ [GHC.Types.Char] $dEq
  = Hangman.$fEqWordList_$s$fEq[]_$c/=
trusted: safe
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

